//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Ivanov_NP_Cloud_Clients.ServiceReference1 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FilesInfo", Namespace="http://schemas.datacontract.org/2004/07/Ivanov_NP_Cloud_Service")]
    [System.SerializableAttribute()]
    public partial class FilesInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FileFullNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FileIconField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FileNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LastAccessTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long SizeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FileFullName {
            get {
                return this.FileFullNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FileFullNameField, value) != true)) {
                    this.FileFullNameField = value;
                    this.RaisePropertyChanged("FileFullName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FileIcon {
            get {
                return this.FileIconField;
            }
            set {
                if ((object.ReferenceEquals(this.FileIconField, value) != true)) {
                    this.FileIconField = value;
                    this.RaisePropertyChanged("FileIcon");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FileName {
            get {
                return this.FileNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FileNameField, value) != true)) {
                    this.FileNameField = value;
                    this.RaisePropertyChanged("FileName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LastAccessTime {
            get {
                return this.LastAccessTimeField;
            }
            set {
                if ((object.ReferenceEquals(this.LastAccessTimeField, value) != true)) {
                    this.LastAccessTimeField = value;
                    this.RaisePropertyChanged("LastAccessTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long Size {
            get {
                return this.SizeField;
            }
            set {
                if ((this.SizeField.Equals(value) != true)) {
                    this.SizeField = value;
                    this.RaisePropertyChanged("Size");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CheckRegistrarion", ReplyAction="http://tempuri.org/IService1/CheckRegistrarionResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(string), Action="http://tempuri.org/IService1/CheckRegistrarionStringFault", Name="string", Namespace="http://schemas.microsoft.com/2003/10/Serialization/")]
        bool CheckRegistrarion(string login, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CheckRegistrarion", ReplyAction="http://tempuri.org/IService1/CheckRegistrarionResponse")]
        System.Threading.Tasks.Task<bool> CheckRegistrarionAsync(string login, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/RegisterNewUser", ReplyAction="http://tempuri.org/IService1/RegisterNewUserResponse")]
        void RegisterNewUser(string login, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/RegisterNewUser", ReplyAction="http://tempuri.org/IService1/RegisterNewUserResponse")]
        System.Threading.Tasks.Task RegisterNewUserAsync(string login, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetBaseFolderPath", ReplyAction="http://tempuri.org/IService1/GetBaseFolderPathResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(string), Action="http://tempuri.org/IService1/GetBaseFolderPathStringFault", Name="string", Namespace="http://schemas.microsoft.com/2003/10/Serialization/")]
        string GetBaseFolderPath(string login, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetBaseFolderPath", ReplyAction="http://tempuri.org/IService1/GetBaseFolderPathResponse")]
        System.Threading.Tasks.Task<string> GetBaseFolderPathAsync(string login, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ShowFilesFromBaseDirectory", ReplyAction="http://tempuri.org/IService1/ShowFilesFromBaseDirectoryResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(string), Action="http://tempuri.org/IService1/ShowFilesFromBaseDirectoryStringFault", Name="string", Namespace="http://schemas.microsoft.com/2003/10/Serialization/")]
        Ivanov_NP_Cloud_Clients.ServiceReference1.FilesInfo[] ShowFilesFromBaseDirectory(string login, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ShowFilesFromBaseDirectory", ReplyAction="http://tempuri.org/IService1/ShowFilesFromBaseDirectoryResponse")]
        System.Threading.Tasks.Task<Ivanov_NP_Cloud_Clients.ServiceReference1.FilesInfo[]> ShowFilesFromBaseDirectoryAsync(string login, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/RefreshFiles", ReplyAction="http://tempuri.org/IService1/RefreshFilesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(string), Action="http://tempuri.org/IService1/RefreshFilesStringFault", Name="string", Namespace="http://schemas.microsoft.com/2003/10/Serialization/")]
        Ivanov_NP_Cloud_Clients.ServiceReference1.FilesInfo[] RefreshFiles(string path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/RefreshFiles", ReplyAction="http://tempuri.org/IService1/RefreshFilesResponse")]
        System.Threading.Tasks.Task<Ivanov_NP_Cloud_Clients.ServiceReference1.FilesInfo[]> RefreshFilesAsync(string path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SearchFiles", ReplyAction="http://tempuri.org/IService1/SearchFilesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(string), Action="http://tempuri.org/IService1/SearchFilesStringFault", Name="string", Namespace="http://schemas.microsoft.com/2003/10/Serialization/")]
        Ivanov_NP_Cloud_Clients.ServiceReference1.FilesInfo[] SearchFiles(string path, string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SearchFiles", ReplyAction="http://tempuri.org/IService1/SearchFilesResponse")]
        System.Threading.Tasks.Task<Ivanov_NP_Cloud_Clients.ServiceReference1.FilesInfo[]> SearchFilesAsync(string path, string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CreateFolder", ReplyAction="http://tempuri.org/IService1/CreateFolderResponse")]
        void CreateFolder(string path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CreateFolder", ReplyAction="http://tempuri.org/IService1/CreateFolderResponse")]
        System.Threading.Tasks.Task CreateFolderAsync(string path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteFile", ReplyAction="http://tempuri.org/IService1/DeleteFileResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(string), Action="http://tempuri.org/IService1/DeleteFileStringFault", Name="string", Namespace="http://schemas.microsoft.com/2003/10/Serialization/")]
        void DeleteFile(string path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteFile", ReplyAction="http://tempuri.org/IService1/DeleteFileResponse")]
        System.Threading.Tasks.Task DeleteFileAsync(string path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetArray", ReplyAction="http://tempuri.org/IService1/GetArrayResponse")]
        byte[] GetArray(string path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetArray", ReplyAction="http://tempuri.org/IService1/GetArrayResponse")]
        System.Threading.Tasks.Task<byte[]> GetArrayAsync(string path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetFolders", ReplyAction="http://tempuri.org/IService1/GetFoldersResponse")]
        string[] GetFolders(string sourcePath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetFolders", ReplyAction="http://tempuri.org/IService1/GetFoldersResponse")]
        System.Threading.Tasks.Task<string[]> GetFoldersAsync(string sourcePath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetFilesInsideFolders", ReplyAction="http://tempuri.org/IService1/GetFilesInsideFoldersResponse")]
        string[] GetFilesInsideFolders(string sourcePath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetFilesInsideFolders", ReplyAction="http://tempuri.org/IService1/GetFilesInsideFoldersResponse")]
        System.Threading.Tasks.Task<string[]> GetFilesInsideFoldersAsync(string sourcePath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UploadFiles", ReplyAction="http://tempuri.org/IService1/UploadFilesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(string), Action="http://tempuri.org/IService1/UploadFilesStringFault", Name="string", Namespace="http://schemas.microsoft.com/2003/10/Serialization/")]
        void UploadFiles(byte[] arr, string destPath, string fileName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UploadFiles", ReplyAction="http://tempuri.org/IService1/UploadFilesResponse")]
        System.Threading.Tasks.Task UploadFilesAsync(byte[] arr, string destPath, string fileName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UploadFolders", ReplyAction="http://tempuri.org/IService1/UploadFoldersResponse")]
        void UploadFolders(string[] foldersList, string[] filesList, string destPath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UploadFolders", ReplyAction="http://tempuri.org/IService1/UploadFoldersResponse")]
        System.Threading.Tasks.Task UploadFoldersAsync(string[] foldersList, string[] filesList, string destPath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UploadFilesInsideFolders", ReplyAction="http://tempuri.org/IService1/UploadFilesInsideFoldersResponse")]
        void UploadFilesInsideFolders(byte[] arr, string destPath, string filePath, int index);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UploadFilesInsideFolders", ReplyAction="http://tempuri.org/IService1/UploadFilesInsideFoldersResponse")]
        System.Threading.Tasks.Task UploadFilesInsideFoldersAsync(byte[] arr, string destPath, string filePath, int index);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : Ivanov_NP_Cloud_Clients.ServiceReference1.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<Ivanov_NP_Cloud_Clients.ServiceReference1.IService1>, Ivanov_NP_Cloud_Clients.ServiceReference1.IService1 {
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool CheckRegistrarion(string login, string password) {
            return base.Channel.CheckRegistrarion(login, password);
        }
        
        public System.Threading.Tasks.Task<bool> CheckRegistrarionAsync(string login, string password) {
            return base.Channel.CheckRegistrarionAsync(login, password);
        }
        
        public void RegisterNewUser(string login, string password) {
            base.Channel.RegisterNewUser(login, password);
        }
        
        public System.Threading.Tasks.Task RegisterNewUserAsync(string login, string password) {
            return base.Channel.RegisterNewUserAsync(login, password);
        }
        
        public string GetBaseFolderPath(string login, string password) {
            return base.Channel.GetBaseFolderPath(login, password);
        }
        
        public System.Threading.Tasks.Task<string> GetBaseFolderPathAsync(string login, string password) {
            return base.Channel.GetBaseFolderPathAsync(login, password);
        }
        
        public Ivanov_NP_Cloud_Clients.ServiceReference1.FilesInfo[] ShowFilesFromBaseDirectory(string login, string password) {
            return base.Channel.ShowFilesFromBaseDirectory(login, password);
        }
        
        public System.Threading.Tasks.Task<Ivanov_NP_Cloud_Clients.ServiceReference1.FilesInfo[]> ShowFilesFromBaseDirectoryAsync(string login, string password) {
            return base.Channel.ShowFilesFromBaseDirectoryAsync(login, password);
        }
        
        public Ivanov_NP_Cloud_Clients.ServiceReference1.FilesInfo[] RefreshFiles(string path) {
            return base.Channel.RefreshFiles(path);
        }
        
        public System.Threading.Tasks.Task<Ivanov_NP_Cloud_Clients.ServiceReference1.FilesInfo[]> RefreshFilesAsync(string path) {
            return base.Channel.RefreshFilesAsync(path);
        }
        
        public Ivanov_NP_Cloud_Clients.ServiceReference1.FilesInfo[] SearchFiles(string path, string name) {
            return base.Channel.SearchFiles(path, name);
        }
        
        public System.Threading.Tasks.Task<Ivanov_NP_Cloud_Clients.ServiceReference1.FilesInfo[]> SearchFilesAsync(string path, string name) {
            return base.Channel.SearchFilesAsync(path, name);
        }
        
        public void CreateFolder(string path) {
            base.Channel.CreateFolder(path);
        }
        
        public System.Threading.Tasks.Task CreateFolderAsync(string path) {
            return base.Channel.CreateFolderAsync(path);
        }
        
        public void DeleteFile(string path) {
            base.Channel.DeleteFile(path);
        }
        
        public System.Threading.Tasks.Task DeleteFileAsync(string path) {
            return base.Channel.DeleteFileAsync(path);
        }
        
        public byte[] GetArray(string path) {
            return base.Channel.GetArray(path);
        }
        
        public System.Threading.Tasks.Task<byte[]> GetArrayAsync(string path) {
            return base.Channel.GetArrayAsync(path);
        }
        
        public string[] GetFolders(string sourcePath) {
            return base.Channel.GetFolders(sourcePath);
        }
        
        public System.Threading.Tasks.Task<string[]> GetFoldersAsync(string sourcePath) {
            return base.Channel.GetFoldersAsync(sourcePath);
        }
        
        public string[] GetFilesInsideFolders(string sourcePath) {
            return base.Channel.GetFilesInsideFolders(sourcePath);
        }
        
        public System.Threading.Tasks.Task<string[]> GetFilesInsideFoldersAsync(string sourcePath) {
            return base.Channel.GetFilesInsideFoldersAsync(sourcePath);
        }
        
        public void UploadFiles(byte[] arr, string destPath, string fileName) {
            base.Channel.UploadFiles(arr, destPath, fileName);
        }
        
        public System.Threading.Tasks.Task UploadFilesAsync(byte[] arr, string destPath, string fileName) {
            return base.Channel.UploadFilesAsync(arr, destPath, fileName);
        }
        
        public void UploadFolders(string[] foldersList, string[] filesList, string destPath) {
            base.Channel.UploadFolders(foldersList, filesList, destPath);
        }
        
        public System.Threading.Tasks.Task UploadFoldersAsync(string[] foldersList, string[] filesList, string destPath) {
            return base.Channel.UploadFoldersAsync(foldersList, filesList, destPath);
        }
        
        public void UploadFilesInsideFolders(byte[] arr, string destPath, string filePath, int index) {
            base.Channel.UploadFilesInsideFolders(arr, destPath, filePath, index);
        }
        
        public System.Threading.Tasks.Task UploadFilesInsideFoldersAsync(byte[] arr, string destPath, string filePath, int index) {
            return base.Channel.UploadFilesInsideFoldersAsync(arr, destPath, filePath, index);
        }
    }
}
